// All material copyright Esri, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.28/esri/copyright.txt for details.
//>>built
define("exports ../../core/arrayUtils ../../core/Logger ../../core/typedArrayUtil ./checkWebGLError ./contextUtils ./enums".split(" "),function(n,q,r,p,l,g,d){const f=r.getLogger("esri.views.webgl.BufferObject");class h{static createIndex(a,b,c){return new h(a,d.BufferType.ELEMENT_ARRAY_BUFFER,b,c)}static createVertex(a,b,c){return new h(a,d.BufferType.ARRAY_BUFFER,b,c)}static createUniform(a,b,c){if(a.type!==g.ContextType.WEBGL2)throw Error("Uniform buffers are supported in WebGL2 only!");return new h(a,
d.BufferType.UNIFORM_BUFFER,b,c)}static createPixelPack(a,b=d.Usage.STREAM_READ,c){if(a.type!==g.ContextType.WEBGL2)throw Error("Pixel pack buffers are supported in WebGL2 only!");a=new h(a,d.BufferType.PIXEL_PACK_BUFFER,b);c&&a.setSize(c);return a}static createPixelUnpack(a,b=d.Usage.STREAM_DRAW,c){if(a.type!==g.ContextType.WEBGL2)throw Error("Pixel unpack buffers are supported in WebGL2 only!");return new h(a,d.BufferType.PIXEL_UNPACK_BUFFER,b,c)}constructor(a,b,c,e){this._context=a;this.bufferType=
b;this.usage=c;this._glName=null;this._size=-1;this._indexType=void 0;a.instanceCounter.increment(d.ResourceType.BufferObject,this);this._glName=this._context.gl.createBuffer();l.checkWebGLError(this._context.gl);e&&this.setData(e)}get glName(){return this._glName}get size(){return this._size}get indexType(){return this._indexType}get byteLength(){return this.bufferType===d.BufferType.ELEMENT_ARRAY_BUFFER?this._indexType===d.DataType.UNSIGNED_INT?4*this._size:2*this._size:this._size}get _isVAOAware(){return this.bufferType===
d.BufferType.ELEMENT_ARRAY_BUFFER||this.bufferType===d.BufferType.ARRAY_BUFFER}dispose(){this._context?.gl?(this._glName&&(this._context.gl.deleteBuffer(this._glName),this._glName=null),this._context.instanceCounter.decrement(d.ResourceType.BufferObject,this),this._context=null):this._glName&&f.warn("Leaked WebGL buffer object")}setSize(a,b=null){0>=a&&f.error("Buffer size needs to be positive!");if(this.bufferType===d.BufferType.ELEMENT_ARRAY_BUFFER&&null!=b)switch(this._indexType=b,b){case d.DataType.UNSIGNED_SHORT:a*=
2;break;case d.DataType.UNSIGNED_INT:a*=4}this._setBufferData(a)}setData(a){if(a){var b=a.byteLength;this.bufferType===d.BufferType.ELEMENT_ARRAY_BUFFER&&(p.isUint16Array(a)&&(b/=2,this._indexType=d.DataType.UNSIGNED_SHORT),p.isUint32Array(a)&&(b/=4,this._indexType=d.DataType.UNSIGNED_INT));this._setBufferData(b,a)}}_setBufferData(a,b=null){this._size=a;const c=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null);this._context.bindBuffer(this);const e=this._context.gl;null!=b?
e.bufferData(this.bufferType,b,this.usage):e.bufferData(this.bufferType,a,this.usage);l.checkWebGLError(e);this._isVAOAware&&this._context.bindVAO(c)}setSubData(a,b,c,e){if(a){(0>b||b*a.BYTES_PER_ELEMENT>=this.byteLength)&&f.error("offset is out of range!");c>=e&&f.error("end must be bigger than start!");(b+(e-c))*a.BYTES_PER_ELEMENT>this.byteLength&&f.error("An attempt to write beyond the end of the buffer!");var k=this._context.getBoundVAO();this._isVAOAware&&this._context.bindVAO(null);this._context.bindBuffer(this);
var m=this._context.gl;this._context.type===g.ContextType.WEBGL2?m.bufferSubData(this.bufferType,b*a.BYTES_PER_ELEMENT,a,c,e-c):(c=0===c&&e===a.length?a:a.subarray(c,e),m.bufferSubData(this.bufferType,b*a.BYTES_PER_ELEMENT,c));l.checkWebGLError(m);this._isVAOAware&&this._context.bindVAO(k)}}getSubData(a,b=0,c,e){if(this._context.type!==g.ContextType.WEBGL2)f.error("Get buffer subdata is supported in WebGL2 only!");else if(0>c||0>e)f.error("Problem getting subdata: offset and length were less than zero!");
else{var k=q.isArrayLike(a)?a.BYTES_PER_ELEMENT:1;k*((c??0)+(e??0))>a.byteLength?f.error("Problem getting subdata: offset and length exceeded destination size!"):(b+k*(e??0)>this.byteLength&&f.warn("Potential problem getting subdata: requested data exceeds buffer size!"),k=this._context.gl,this._context.bindBuffer(this,d.BufferType.COPY_READ_BUFFER),k.getBufferSubData(d.BufferType.COPY_READ_BUFFER,b,a,c,e),this._context.unbindBuffer(d.BufferType.COPY_READ_BUFFER))}}async getSubDataAsync(a,b=0,c,e){this._context.type!==
g.ContextType.WEBGL2?f.error("Get buffer subdata is supported in WebGL2 only!"):(await this._context.clientWaitAsync(),this.getSubData(a,b,c,e))}}n.BufferObject=h;Object.defineProperty(n,Symbol.toStringTag,{value:"Module"})});